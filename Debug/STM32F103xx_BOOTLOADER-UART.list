
STM32F103xx_BOOTLOADER-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c40  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d70  08000d70  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d70  08000d70  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000d70  08000d70  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d70  08000d70  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d70  08000d70  00010d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000008  08000d80  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08000d80  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c62  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000060f  00000000  00000000  00020c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  000212a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00021460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001492  00000000  00000000  000215a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f41  00000000  00000000  00022a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000058ed  00000000  00000000  00023973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00029260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d0  00000000  00000000  000292b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d58 	.word	0x08000d58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000d58 	.word	0x08000d58

08000170 <AsciToHex>:

uint16_t Data[100] = {0};
uint32_t Address= 0x08000000;

uint8_t AsciToHex(uint8_t Copy_u8Asci)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint8_t Result;
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )	/* '0' : '9' */
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b2f      	cmp	r3, #47	; 0x2f
 800017e:	d906      	bls.n	800018e <AsciToHex+0x1e>
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	2b39      	cmp	r3, #57	; 0x39
 8000184:	d803      	bhi.n	800018e <AsciToHex+0x1e>
	{
		Result = Copy_u8Asci - 48;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	3b30      	subs	r3, #48	; 0x30
 800018a:	73fb      	strb	r3, [r7, #15]
 800018c:	e002      	b.n	8000194 <AsciToHex+0x24>
	}

	else	/* 'A' : 'F' */
	{
		Result = Copy_u8Asci - 55;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	3b37      	subs	r3, #55	; 0x37
 8000192:	73fb      	strb	r3, [r7, #15]
	}

	return Result;
 8000194:	7bfb      	ldrb	r3, [r7, #15]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <ParseData>:


void ParseData(uint8_t* Copy_u8BufData)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	uint8_t DigitLow,DigitHigh,CC,i;
	uint8_t DataDigit0,DataDigit1,DataDigit2,DataDigit3;
	uint8_t DataCounter = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	75bb      	strb	r3, [r7, #22]

	/* Get Character Count */
	DigitHigh = AsciToHex (Copy_u8BufData[1]);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffdc 	bl	8000170 <AsciToHex>
 80001b8:	4603      	mov	r3, r0
 80001ba:	757b      	strb	r3, [r7, #21]
	DigitLow  = AsciToHex (Copy_u8BufData[2]);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3302      	adds	r3, #2
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffd4 	bl	8000170 <AsciToHex>
 80001c8:	4603      	mov	r3, r0
 80001ca:	753b      	strb	r3, [r7, #20]
	CC        = (DigitHigh<<4) | DigitLow ;
 80001cc:	7d7b      	ldrb	r3, [r7, #21]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	b25a      	sxtb	r2, r3
 80001d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80001d6:	4313      	orrs	r3, r2
 80001d8:	b25b      	sxtb	r3, r3
 80001da:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	DataDigit0 = AsciToHex (Copy_u8BufData[3]);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3303      	adds	r3, #3
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffc4 	bl	8000170 <AsciToHex>
 80001e8:	4603      	mov	r3, r0
 80001ea:	74bb      	strb	r3, [r7, #18]
	DataDigit1 = AsciToHex (Copy_u8BufData[4]);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3304      	adds	r3, #4
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f7ff ffbc 	bl	8000170 <AsciToHex>
 80001f8:	4603      	mov	r3, r0
 80001fa:	747b      	strb	r3, [r7, #17]
	DataDigit2 = AsciToHex (Copy_u8BufData[5]);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3305      	adds	r3, #5
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffb4 	bl	8000170 <AsciToHex>
 8000208:	4603      	mov	r3, r0
 800020a:	743b      	strb	r3, [r7, #16]
	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3306      	adds	r3, #6
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ffac 	bl	8000170 <AsciToHex>
 8000218:	4603      	mov	r3, r0
 800021a:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	Address = Address & 0xFFFF0000;
 800021c:	4b39      	ldr	r3, [pc, #228]	; (8000304 <ParseData+0x164>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	041b      	lsls	r3, r3, #16
 8000224:	4a37      	ldr	r2, [pc, #220]	; (8000304 <ParseData+0x164>)
 8000226:	6013      	str	r3, [r2, #0]
	Address = Address | (DataDigit3) | (DataDigit2 << 4) | (DataDigit1 << 8) | (DataDigit0<<12);
 8000228:	7bfa      	ldrb	r2, [r7, #15]
 800022a:	4b36      	ldr	r3, [pc, #216]	; (8000304 <ParseData+0x164>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4313      	orrs	r3, r2
 8000230:	7c3a      	ldrb	r2, [r7, #16]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	4313      	orrs	r3, r2
 8000236:	7c7a      	ldrb	r2, [r7, #17]
 8000238:	0212      	lsls	r2, r2, #8
 800023a:	4313      	orrs	r3, r2
 800023c:	7cba      	ldrb	r2, [r7, #18]
 800023e:	0312      	lsls	r2, r2, #12
 8000240:	4313      	orrs	r3, r2
 8000242:	4a30      	ldr	r2, [pc, #192]	; (8000304 <ParseData+0x164>)
 8000244:	6013      	str	r3, [r2, #0]

	for (i=0; i<CC/2; i++)
 8000246:	2300      	movs	r3, #0
 8000248:	75fb      	strb	r3, [r7, #23]
 800024a:	e047      	b.n	80002dc <ParseData+0x13c>
	{
		DataDigit0 = AsciToHex (Copy_u8BufData[4*i+9 ]);
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	3309      	adds	r3, #9
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ff89 	bl	8000170 <AsciToHex>
 800025e:	4603      	mov	r3, r0
 8000260:	74bb      	strb	r3, [r7, #18]
		DataDigit1 = AsciToHex (Copy_u8BufData[4*i+10]);
 8000262:	7dfb      	ldrb	r3, [r7, #23]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	330a      	adds	r3, #10
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff7e 	bl	8000170 <AsciToHex>
 8000274:	4603      	mov	r3, r0
 8000276:	747b      	strb	r3, [r7, #17]
		DataDigit2 = AsciToHex (Copy_u8BufData[4*i+11]);
 8000278:	7dfb      	ldrb	r3, [r7, #23]
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	330b      	adds	r3, #11
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff73 	bl	8000170 <AsciToHex>
 800028a:	4603      	mov	r3, r0
 800028c:	743b      	strb	r3, [r7, #16]
		DataDigit3 = AsciToHex (Copy_u8BufData[4*i+12]);
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	330c      	adds	r3, #12
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff68 	bl	8000170 <AsciToHex>
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]

		Data[DataCounter] = (DataDigit3 << 8) | (DataDigit2 << 12) | (DataDigit1) | (DataDigit0<<4);
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	b21a      	sxth	r2, r3
 80002aa:	7c3b      	ldrb	r3, [r7, #16]
 80002ac:	031b      	lsls	r3, r3, #12
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b21a      	sxth	r2, r3
 80002b4:	7c7b      	ldrb	r3, [r7, #17]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	7cbb      	ldrb	r3, [r7, #18]
 80002be:	011b      	lsls	r3, r3, #4
 80002c0:	b21b      	sxth	r3, r3
 80002c2:	4313      	orrs	r3, r2
 80002c4:	b21a      	sxth	r2, r3
 80002c6:	7dbb      	ldrb	r3, [r7, #22]
 80002c8:	b291      	uxth	r1, r2
 80002ca:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <ParseData+0x168>)
 80002cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		DataCounter++;
 80002d0:	7dbb      	ldrb	r3, [r7, #22]
 80002d2:	3301      	adds	r3, #1
 80002d4:	75bb      	strb	r3, [r7, #22]
	for (i=0; i<CC/2; i++)
 80002d6:	7dfb      	ldrb	r3, [r7, #23]
 80002d8:	3301      	adds	r3, #1
 80002da:	75fb      	strb	r3, [r7, #23]
 80002dc:	7cfb      	ldrb	r3, [r7, #19]
 80002de:	085b      	lsrs	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	7dfa      	ldrb	r2, [r7, #23]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d3b1      	bcc.n	800024c <ParseData+0xac>
	}

	FPEC_VidFlashWrite(Address,Data,CC/2);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <ParseData+0x164>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	7cfb      	ldrb	r3, [r7, #19]
 80002ee:	085b      	lsrs	r3, r3, #1
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <ParseData+0x168>)
 80002f6:	f000 f889 	bl	800040c <FPEC_VidFlashWrite>
}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	20000024 	.word	0x20000024

0800030c <ParseUpperAddress>:

void ParseUpperAddress(uint8_t* Copy_u8BufData)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
//	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
//
//	/* Clear Low Part of Address */
//	Address = Address & (u32)0x0000FFFF;
//	Address = Address | (u32)((u32)(DataDigit3 << 28) | (u32)(DataDigit2 << 24) | (u32)(DataDigit1 << 20) | (u32)(DataDigit0 << 16));
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <Parser_VidParseRecord>:

void Parser_VidParseRecord(uint8_t* Copy_u8BufData)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufData[8])
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3308      	adds	r3, #8
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b30      	cmp	r3, #48	; 0x30
 800032e:	d002      	beq.n	8000336 <Parser_VidParseRecord+0x18>
 8000330:	2b34      	cmp	r3, #52	; 0x34
 8000332:	d004      	beq.n	800033e <Parser_VidParseRecord+0x20>
	{
	case '0': ParseData(Copy_u8BufData); break;
	case '4': ParseUpperAddress(Copy_u8BufData); break;
	}
}
 8000334:	e007      	b.n	8000346 <Parser_VidParseRecord+0x28>
	case '0': ParseData(Copy_u8BufData); break;
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f7ff ff32 	bl	80001a0 <ParseData>
 800033c:	e003      	b.n	8000346 <Parser_VidParseRecord+0x28>
	case '4': ParseUpperAddress(Copy_u8BufData); break;
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffe4 	bl	800030c <ParseUpperAddress>
 8000344:	bf00      	nop
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <FPEC_VidEraseAppArea>:
#include "MCAL/FPEC/FPEC_private.h"
#include "MCAL/FPEC/FPEC_config.h"


void FPEC_VidEraseAppArea(void)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i=4;i<64;i++)
 8000354:	2304      	movs	r3, #4
 8000356:	71fb      	strb	r3, [r7, #7]
 8000358:	e006      	b.n	8000368 <FPEC_VidEraseAppArea+0x1a>
	{
		FPEC_VidFlashPageErase(i);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f80b 	bl	8000378 <FPEC_VidFlashPageErase>
	for (i=4;i<64;i++)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	3301      	adds	r3, #1
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b3f      	cmp	r3, #63	; 0x3f
 800036c:	d9f5      	bls.n	800035a <FPEC_VidEraseAppArea+0xc>
	}
}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <FPEC_VidFlashPageErase>:

void FPEC_VidFlashPageErase(uint8_t Copy_u8PageNumber)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 8000382:	bf00      	nop
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	2b01      	cmp	r3, #1
 800038e:	d0f9      	beq.n	8000384 <FPEC_VidFlashPageErase+0xc>

	/* Check if FPEC is locked or not */
	if ( GET_BIT(FPEC->CR,7) == 1)
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	09db      	lsrs	r3, r3, #7
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b01      	cmp	r3, #1
 800039c:	d105      	bne.n	80003aa <FPEC_VidFlashPageErase+0x32>
	{
		FPEC -> KEYR = 0x45670123;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <FPEC_VidFlashPageErase+0x8c>)
 80003a2:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <FPEC_VidFlashPageErase+0x90>)
 80003a8:	605a      	str	r2, [r3, #4]
	}

	/* Page Erase Operation */
	SET_BIT(FPEC->CR,1);
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003b0:	f043 0302 	orr.w	r3, r3, #2
 80003b4:	6113      	str	r3, [r2, #16]

	/* Write Page address */
	FPEC->AR = (uint32_t)(Copy_u8PageNumber * 1024) + 0x08000000 ;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	029b      	lsls	r3, r3, #10
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80003c0:	6153      	str	r3, [r2, #20]

	/* Start operation */
	SET_BIT(FPEC->CR,6);
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6113      	str	r3, [r2, #16]

	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 80003ce:	bf00      	nop
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d0f9      	beq.n	80003d0 <FPEC_VidFlashPageErase+0x58>

	/* EOP */
	SET_BIT(FPEC->SR,5);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	60d3      	str	r3, [r2, #12]
	CLR_BIT(FPEC->CR,1);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <FPEC_VidFlashPageErase+0x88>)
 80003ee:	f023 0302 	bic.w	r3, r3, #2
 80003f2:	6113      	str	r3, [r2, #16]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40022000 	.word	0x40022000
 8000404:	45670123 	.word	0x45670123
 8000408:	cdef89ab 	.word	0xcdef89ab

0800040c <FPEC_VidFlashWrite>:

void FPEC_VidFlashWrite(uint32_t Copy_u32Address, uint16_t* Copy_u16Data, uint8_t Copy_u8Length)
{
 800040c:	b480      	push	{r7}
 800040e:	b087      	sub	sp, #28
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	4613      	mov	r3, r2
 8000418:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	volatile uint16_t Temp;

	while (GET_BIT(FPEC->SR,0) == 1);
 800041a:	bf00      	nop
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b01      	cmp	r3, #1
 8000426:	d0f9      	beq.n	800041c <FPEC_VidFlashWrite+0x10>

	/* Check if FPEC is locked or not */
	if ( /* FPEC_CR->BitAccess.LOCK == 1 */ GET_BIT(FPEC->CR,7) == 1 )
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	09db      	lsrs	r3, r3, #7
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b01      	cmp	r3, #1
 8000434:	d105      	bne.n	8000442 <FPEC_VidFlashWrite+0x36>
	{
		FPEC -> KEYR = 0x45670123;
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000438:	4a1f      	ldr	r2, [pc, #124]	; (80004b8 <FPEC_VidFlashWrite+0xac>)
 800043a:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 800043e:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <FPEC_VidFlashWrite+0xb0>)
 8000440:	605a      	str	r2, [r3, #4]
	}


	for (i = 0; i< Copy_u8Length; i++)
 8000442:	2300      	movs	r3, #0
 8000444:	75fb      	strb	r3, [r7, #23]
 8000446:	e02b      	b.n	80004a0 <FPEC_VidFlashWrite+0x94>
	{
		/* Write Flash Programming */
		SET_BIT(FPEC->CR,0);
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6113      	str	r3, [r2, #16]

		/* Half word operation */

		Temp = Copy_u16Data[i];
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	4413      	add	r3, r2
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	82bb      	strh	r3, [r7, #20]
		*((volatile uint16_t*)Copy_u32Address) = Copy_u16Data[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	441a      	add	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2 ;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3302      	adds	r3, #2
 8000472:	60fb      	str	r3, [r7, #12]

		/* Wait Busy Flag */
		while (GET_BIT(FPEC->SR,0) == 1);
 8000474:	bf00      	nop
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	2b01      	cmp	r3, #1
 8000480:	d0f9      	beq.n	8000476 <FPEC_VidFlashWrite+0x6a>

		/* EOP */
		SET_BIT(FPEC->SR,5);
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->CR,0);
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000490:	691b      	ldr	r3, [r3, #16]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <FPEC_VidFlashWrite+0xa8>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6113      	str	r3, [r2, #16]
	for (i = 0; i< Copy_u8Length; i++)
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	3301      	adds	r3, #1
 800049e:	75fb      	strb	r3, [r7, #23]
 80004a0:	7dfa      	ldrb	r2, [r7, #23]
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d3cf      	bcc.n	8000448 <FPEC_VidFlashWrite+0x3c>
	}

}
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	371c      	adds	r7, #28
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40022000 	.word	0x40022000
 80004b8:	45670123 	.word	0x45670123
 80004bc:	cdef89ab 	.word	0xcdef89ab

080004c0 <GPIO_VidSetPinMode>:




void GPIO_VidSetPinMode(uint8_t Copy_u8Port, uint8_t Copy_u8Pin, uint8_t Copy_u8Mode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b06      	cmp	r3, #6
 80004d6:	f200 81bc 	bhi.w	8000852 <GPIO_VidSetPinMode+0x392>
 80004da:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <GPIO_VidSetPinMode+0x20>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	080004fd 	.word	0x080004fd
 80004e4:	08000571 	.word	0x08000571
 80004e8:	080005e5 	.word	0x080005e5
 80004ec:	08000659 	.word	0x08000659
 80004f0:	080006cd 	.word	0x080006cd
 80004f4:	08000741 	.word	0x08000741
 80004f8:	080007e1 	.word	0x080007e1
	{
	case PORT_A:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b07      	cmp	r3, #7
 8000500:	d817      	bhi.n	8000532 <GPIO_VidSetPinMode+0x72>
		{
			/* clear the corresponding 4 bits */
			GPIOA_CRL &= ~(0b1111     << (Copy_u8Pin * 4));
 8000502:	4b9d      	ldr	r3, [pc, #628]	; (8000778 <GPIO_VidSetPinMode+0x2b8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	210f      	movs	r1, #15
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	43d2      	mvns	r2, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a98      	ldr	r2, [pc, #608]	; (8000778 <GPIO_VidSetPinMode+0x2b8>)
 8000516:	400b      	ands	r3, r1
 8000518:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOA_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 800051a:	4b97      	ldr	r3, [pc, #604]	; (8000778 <GPIO_VidSetPinMode+0x2b8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	7979      	ldrb	r1, [r7, #5]
 8000520:	79ba      	ldrb	r2, [r7, #6]
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	4611      	mov	r1, r2
 800052a:	4a93      	ldr	r2, [pc, #588]	; (8000778 <GPIO_VidSetPinMode+0x2b8>)
 800052c:	430b      	orrs	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 8000530:	e191      	b.n	8000856 <GPIO_VidSetPinMode+0x396>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	f200 818e 	bhi.w	8000856 <GPIO_VidSetPinMode+0x396>
			Copy_u8Pin -= 8;
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	3b08      	subs	r3, #8
 800053e:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~(0b1111     << (Copy_u8Pin * 4));
 8000540:	4b8e      	ldr	r3, [pc, #568]	; (800077c <GPIO_VidSetPinMode+0x2bc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	210f      	movs	r1, #15
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a8a      	ldr	r2, [pc, #552]	; (800077c <GPIO_VidSetPinMode+0x2bc>)
 8000554:	400b      	ands	r3, r1
 8000556:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000558:	4b88      	ldr	r3, [pc, #544]	; (800077c <GPIO_VidSetPinMode+0x2bc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	7979      	ldrb	r1, [r7, #5]
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a84      	ldr	r2, [pc, #528]	; (800077c <GPIO_VidSetPinMode+0x2bc>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
		break;
 800056e:	e172      	b.n	8000856 <GPIO_VidSetPinMode+0x396>

	case PORT_B:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b07      	cmp	r3, #7
 8000574:	d817      	bhi.n	80005a6 <GPIO_VidSetPinMode+0xe6>
		{
			/* clear the corresponding 4 bits */
			GPIOB_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 8000576:	4b82      	ldr	r3, [pc, #520]	; (8000780 <GPIO_VidSetPinMode+0x2c0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	210f      	movs	r1, #15
 8000580:	fa01 f202 	lsl.w	r2, r1, r2
 8000584:	43d2      	mvns	r2, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4a7d      	ldr	r2, [pc, #500]	; (8000780 <GPIO_VidSetPinMode+0x2c0>)
 800058a:	400b      	ands	r3, r1
 800058c:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOB_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 800058e:	4b7c      	ldr	r3, [pc, #496]	; (8000780 <GPIO_VidSetPinMode+0x2c0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7979      	ldrb	r1, [r7, #5]
 8000594:	79ba      	ldrb	r2, [r7, #6]
 8000596:	0092      	lsls	r2, r2, #2
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a78      	ldr	r2, [pc, #480]	; (8000780 <GPIO_VidSetPinMode+0x2c0>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 80005a4:	e159      	b.n	800085a <GPIO_VidSetPinMode+0x39a>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	f200 8156 	bhi.w	800085a <GPIO_VidSetPinMode+0x39a>
			Copy_u8Pin -= 8;
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	3b08      	subs	r3, #8
 80005b2:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 80005b4:	4b73      	ldr	r3, [pc, #460]	; (8000784 <GPIO_VidSetPinMode+0x2c4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	79ba      	ldrb	r2, [r7, #6]
 80005ba:	0092      	lsls	r2, r2, #2
 80005bc:	210f      	movs	r1, #15
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	43d2      	mvns	r2, r2
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a6f      	ldr	r2, [pc, #444]	; (8000784 <GPIO_VidSetPinMode+0x2c4>)
 80005c8:	400b      	ands	r3, r1
 80005ca:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80005cc:	4b6d      	ldr	r3, [pc, #436]	; (8000784 <GPIO_VidSetPinMode+0x2c4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	7979      	ldrb	r1, [r7, #5]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a69      	ldr	r2, [pc, #420]	; (8000784 <GPIO_VidSetPinMode+0x2c4>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
		break;
 80005e2:	e13a      	b.n	800085a <GPIO_VidSetPinMode+0x39a>

	case PORT_C:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	d817      	bhi.n	800061a <GPIO_VidSetPinMode+0x15a>
		{
			/* clear the corresponding 4 bits */
			GPIOC_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 80005ea:	4b67      	ldr	r3, [pc, #412]	; (8000788 <GPIO_VidSetPinMode+0x2c8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	0092      	lsls	r2, r2, #2
 80005f2:	210f      	movs	r1, #15
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a62      	ldr	r2, [pc, #392]	; (8000788 <GPIO_VidSetPinMode+0x2c8>)
 80005fe:	400b      	ands	r3, r1
 8000600:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOC_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000602:	4b61      	ldr	r3, [pc, #388]	; (8000788 <GPIO_VidSetPinMode+0x2c8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	7979      	ldrb	r1, [r7, #5]
 8000608:	79ba      	ldrb	r2, [r7, #6]
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a5d      	ldr	r2, [pc, #372]	; (8000788 <GPIO_VidSetPinMode+0x2c8>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 8000618:	e121      	b.n	800085e <GPIO_VidSetPinMode+0x39e>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	f200 811e 	bhi.w	800085e <GPIO_VidSetPinMode+0x39e>
			Copy_u8Pin -= 8;
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	3b08      	subs	r3, #8
 8000626:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 8000628:	4b58      	ldr	r3, [pc, #352]	; (800078c <GPIO_VidSetPinMode+0x2cc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	210f      	movs	r1, #15
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	43d2      	mvns	r2, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a54      	ldr	r2, [pc, #336]	; (800078c <GPIO_VidSetPinMode+0x2cc>)
 800063c:	400b      	ands	r3, r1
 800063e:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <GPIO_VidSetPinMode+0x2cc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	7979      	ldrb	r1, [r7, #5]
 8000646:	79ba      	ldrb	r2, [r7, #6]
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a4e      	ldr	r2, [pc, #312]	; (800078c <GPIO_VidSetPinMode+0x2cc>)
 8000652:	430b      	orrs	r3, r1
 8000654:	6013      	str	r3, [r2, #0]
		break;
 8000656:	e102      	b.n	800085e <GPIO_VidSetPinMode+0x39e>

	case PORT_D:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d817      	bhi.n	800068e <GPIO_VidSetPinMode+0x1ce>
		{
			/* clear the corresponding 4 bits */
			GPIOD_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 800065e:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <GPIO_VidSetPinMode+0x2d0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	79ba      	ldrb	r2, [r7, #6]
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	210f      	movs	r1, #15
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	43d2      	mvns	r2, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a47      	ldr	r2, [pc, #284]	; (8000790 <GPIO_VidSetPinMode+0x2d0>)
 8000672:	400b      	ands	r3, r1
 8000674:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOD_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <GPIO_VidSetPinMode+0x2d0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7979      	ldrb	r1, [r7, #5]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a42      	ldr	r2, [pc, #264]	; (8000790 <GPIO_VidSetPinMode+0x2d0>)
 8000688:	430b      	orrs	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 800068c:	e0e9      	b.n	8000862 <GPIO_VidSetPinMode+0x3a2>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	f200 80e6 	bhi.w	8000862 <GPIO_VidSetPinMode+0x3a2>
			Copy_u8Pin -= 8;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	3b08      	subs	r3, #8
 800069a:	71bb      	strb	r3, [r7, #6]
			GPIOD_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 800069c:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <GPIO_VidSetPinMode+0x2d4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	0092      	lsls	r2, r2, #2
 80006a4:	210f      	movs	r1, #15
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a39      	ldr	r2, [pc, #228]	; (8000794 <GPIO_VidSetPinMode+0x2d4>)
 80006b0:	400b      	ands	r3, r1
 80006b2:	6013      	str	r3, [r2, #0]
			GPIOD_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <GPIO_VidSetPinMode+0x2d4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	7979      	ldrb	r1, [r7, #5]
 80006ba:	79ba      	ldrb	r2, [r7, #6]
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a33      	ldr	r2, [pc, #204]	; (8000794 <GPIO_VidSetPinMode+0x2d4>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6013      	str	r3, [r2, #0]
		break;
 80006ca:	e0ca      	b.n	8000862 <GPIO_VidSetPinMode+0x3a2>

	case PORT_E:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d817      	bhi.n	8000702 <GPIO_VidSetPinMode+0x242>
		{
			/* clear the corresponding 4 bits */
			GPIOE_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <GPIO_VidSetPinMode+0x2d8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79ba      	ldrb	r2, [r7, #6]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	210f      	movs	r1, #15
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <GPIO_VidSetPinMode+0x2d8>)
 80006e6:	400b      	ands	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOE_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <GPIO_VidSetPinMode+0x2d8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7979      	ldrb	r1, [r7, #5]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a27      	ldr	r2, [pc, #156]	; (8000798 <GPIO_VidSetPinMode+0x2d8>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 8000700:	e0b1      	b.n	8000866 <GPIO_VidSetPinMode+0x3a6>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	f200 80ae 	bhi.w	8000866 <GPIO_VidSetPinMode+0x3a6>
			Copy_u8Pin -= 8;
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	3b08      	subs	r3, #8
 800070e:	71bb      	strb	r3, [r7, #6]
			GPIOE_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <GPIO_VidSetPinMode+0x2dc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	210f      	movs	r1, #15
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	43d2      	mvns	r2, r2
 8000720:	4611      	mov	r1, r2
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <GPIO_VidSetPinMode+0x2dc>)
 8000724:	400b      	ands	r3, r1
 8000726:	6013      	str	r3, [r2, #0]
			GPIOE_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <GPIO_VidSetPinMode+0x2dc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	7979      	ldrb	r1, [r7, #5]
 800072e:	79ba      	ldrb	r2, [r7, #6]
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <GPIO_VidSetPinMode+0x2dc>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
		break;
 800073e:	e092      	b.n	8000866 <GPIO_VidSetPinMode+0x3a6>

	case PORT_F:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d82e      	bhi.n	80007a4 <GPIO_VidSetPinMode+0x2e4>
		{
			/* clear the corresponding 4 bits */
			GPIOF_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <GPIO_VidSetPinMode+0x2e0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	210f      	movs	r1, #15
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	43d2      	mvns	r2, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <GPIO_VidSetPinMode+0x2e0>)
 800075a:	400b      	ands	r3, r1
 800075c:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOF_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <GPIO_VidSetPinMode+0x2e0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7979      	ldrb	r1, [r7, #5]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <GPIO_VidSetPinMode+0x2e0>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 8000774:	e079      	b.n	800086a <GPIO_VidSetPinMode+0x3aa>
 8000776:	bf00      	nop
 8000778:	40010800 	.word	0x40010800
 800077c:	40010804 	.word	0x40010804
 8000780:	40010c00 	.word	0x40010c00
 8000784:	40010c04 	.word	0x40010c04
 8000788:	40011000 	.word	0x40011000
 800078c:	40011004 	.word	0x40011004
 8000790:	40011400 	.word	0x40011400
 8000794:	40011404 	.word	0x40011404
 8000798:	40011800 	.word	0x40011800
 800079c:	40011804 	.word	0x40011804
 80007a0:	40011c00 	.word	0x40011c00
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	2b0f      	cmp	r3, #15
 80007a8:	d85f      	bhi.n	800086a <GPIO_VidSetPinMode+0x3aa>
			Copy_u8Pin -= 8;
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	3b08      	subs	r3, #8
 80007ae:	71bb      	strb	r3, [r7, #6]
			GPIOF_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 80007b0:	4b32      	ldr	r3, [pc, #200]	; (800087c <GPIO_VidSetPinMode+0x3bc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	0092      	lsls	r2, r2, #2
 80007b8:	210f      	movs	r1, #15
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	43d2      	mvns	r2, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a2e      	ldr	r2, [pc, #184]	; (800087c <GPIO_VidSetPinMode+0x3bc>)
 80007c4:	400b      	ands	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
			GPIOF_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <GPIO_VidSetPinMode+0x3bc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	7979      	ldrb	r1, [r7, #5]
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a28      	ldr	r2, [pc, #160]	; (800087c <GPIO_VidSetPinMode+0x3bc>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	6013      	str	r3, [r2, #0]
		break;
 80007de:	e044      	b.n	800086a <GPIO_VidSetPinMode+0x3aa>

	case PORT_G:
		if (Copy_u8Pin < 8)			/* low register pins 0:7 */
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	d817      	bhi.n	8000816 <GPIO_VidSetPinMode+0x356>
		{
			/* clear the corresponding 4 bits */
			GPIOG_CRL &= ~(0b1111 << (Copy_u8Pin * 4));
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <GPIO_VidSetPinMode+0x3c0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	79ba      	ldrb	r2, [r7, #6]
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	210f      	movs	r1, #15
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <GPIO_VidSetPinMode+0x3c0>)
 80007fa:	400b      	ands	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]

			/* write the value of the mode */
			GPIOG_CRL |= (Copy_u8Mode << (Copy_u8Pin * 4));
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <GPIO_VidSetPinMode+0x3c0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7979      	ldrb	r1, [r7, #5]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <GPIO_VidSetPinMode+0x3c0>)
 8000810:	430b      	orrs	r3, r1
 8000812:	6013      	str	r3, [r2, #0]
		}
		else
		{
			/* error */
		}
		break;
 8000814:	e02b      	b.n	800086e <GPIO_VidSetPinMode+0x3ae>
		else if (Copy_u8Pin < 16)	/* high register pins 8:15 */
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d828      	bhi.n	800086e <GPIO_VidSetPinMode+0x3ae>
			Copy_u8Pin -= 8;
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	3b08      	subs	r3, #8
 8000820:	71bb      	strb	r3, [r7, #6]
			GPIOG_CRH &= ~(0b1111 << (Copy_u8Pin * 4));
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <GPIO_VidSetPinMode+0x3c4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	79ba      	ldrb	r2, [r7, #6]
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	210f      	movs	r1, #15
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	43d2      	mvns	r2, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <GPIO_VidSetPinMode+0x3c4>)
 8000836:	400b      	ands	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
			GPIOG_CRH |= (Copy_u8Mode << (Copy_u8Pin * 4));
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <GPIO_VidSetPinMode+0x3c4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	7979      	ldrb	r1, [r7, #5]
 8000840:	79ba      	ldrb	r2, [r7, #6]
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <GPIO_VidSetPinMode+0x3c4>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6013      	str	r3, [r2, #0]
		break;
 8000850:	e00d      	b.n	800086e <GPIO_VidSetPinMode+0x3ae>

	default : /* error */	break;
 8000852:	bf00      	nop
 8000854:	e00c      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 8000856:	bf00      	nop
 8000858:	e00a      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 800085a:	bf00      	nop
 800085c:	e008      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 800085e:	bf00      	nop
 8000860:	e006      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 8000862:	bf00      	nop
 8000864:	e004      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 8000866:	bf00      	nop
 8000868:	e002      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 800086a:	bf00      	nop
 800086c:	e000      	b.n	8000870 <GPIO_VidSetPinMode+0x3b0>
		break;
 800086e:	bf00      	nop
	}
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40011c04 	.word	0x40011c04
 8000880:	40012000 	.word	0x40012000
 8000884:	40012004 	.word	0x40012004

08000888 <RCC_VidInit>:
#include "MCAL/RCC/RCC_private.h"
#include "MCAL/RCC/RCC_config.h"


void RCC_VidInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	uint32_t LOC_u32TimeOut = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
#if     RCC_TYPE == RCC_HSI
    /* high speed internal */

	/* BIT 1:0(system clock switch bits) -> Choose Between HSI OR HSE OR PLL */
	/* HSI Selected As A System Clock */
	CLR_BIT(RCC_CFGR, 0);
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <RCC_VidInit+0x64>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <RCC_VidInit+0x64>)
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR, 1);
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <RCC_VidInit+0x64>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <RCC_VidInit+0x64>)
 80008a4:	f023 0302 	bic.w	r3, r3, #2
 80008a8:	6013      	str	r3, [r2, #0]

	/* Bit 0(hsi on) -> Enable The HSI Clock */
	SET_BIT(RCC_CR, 0);
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <RCC_VidInit+0x68>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <RCC_VidInit+0x68>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6013      	str	r3, [r2, #0]

	/* Bit 1(hsi ready) -> Checking While The HSI Clock Is Stable */
	while( (GET_BIT(RCC_CR, 1) == 0) && (LOC_u32TimeOut < 100000))
 80008b6:	e002      	b.n	80008be <RCC_VidInit+0x36>
	{ LOC_u32TimeOut++; }
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
	while( (GET_BIT(RCC_CR, 1) == 0) && (LOC_u32TimeOut < 100000))
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <RCC_VidInit+0x68>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	085b      	lsrs	r3, r3, #1
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <RCC_VidInit+0x4c>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <RCC_VidInit+0x6c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d9f1      	bls.n	80008b8 <RCC_VidInit+0x30>
#if     CLK_SECURITY_SYSTEM == RCC_CSS_ENABLE
    /* css is on */
	SET_BIT(RCC_CR, 19);
#else
    /* css is off */
	CLR_BIT(RCC_CR, 19);
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <RCC_VidInit+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <RCC_VidInit+0x68>)
 80008da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80008de:	6013      	str	r3, [r2, #0]
#endif  /* CLK_SECURITY_SYSTEM */
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021004 	.word	0x40021004
 80008f0:	40021000 	.word	0x40021000
 80008f4:	0001869f 	.word	0x0001869f

080008f8 <RCC_VidEnablePeripheralClock>:

void RCC_VidEnablePeripheralClock (uint8_t Copy_u8PeripheralBus, uint8_t Copy_u8Peripheral)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8PeripheralBus)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d01c      	beq.n	8000948 <RCC_VidEnablePeripheralClock+0x50>
 800090e:	2b02      	cmp	r3, #2
 8000910:	dc25      	bgt.n	800095e <RCC_VidEnablePeripheralClock+0x66>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <RCC_VidEnablePeripheralClock+0x24>
 8000916:	2b01      	cmp	r3, #1
 8000918:	d00b      	beq.n	8000932 <RCC_VidEnablePeripheralClock+0x3a>
        	break;
        case APB2:
        	SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
        	break;
        default :
        	break;
 800091a:	e020      	b.n	800095e <RCC_VidEnablePeripheralClock+0x66>
        	SET_BIT(RCC_AHBENR, Copy_u8Peripheral);
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <RCC_VidEnablePeripheralClock+0x74>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <RCC_VidEnablePeripheralClock+0x74>)
 800092c:	430b      	orrs	r3, r1
 800092e:	6013      	str	r3, [r2, #0]
        	break;
 8000930:	e016      	b.n	8000960 <RCC_VidEnablePeripheralClock+0x68>
        	SET_BIT(RCC_APB1ENR, Copy_u8Peripheral);
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <RCC_VidEnablePeripheralClock+0x78>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <RCC_VidEnablePeripheralClock+0x78>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
        	break;
 8000946:	e00b      	b.n	8000960 <RCC_VidEnablePeripheralClock+0x68>
        	SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <RCC_VidEnablePeripheralClock+0x7c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	79ba      	ldrb	r2, [r7, #6]
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	4611      	mov	r1, r2
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <RCC_VidEnablePeripheralClock+0x7c>)
 8000958:	430b      	orrs	r3, r1
 800095a:	6013      	str	r3, [r2, #0]
        	break;
 800095c:	e000      	b.n	8000960 <RCC_VidEnablePeripheralClock+0x68>
        	break;
 800095e:	bf00      	nop
    }

}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021014 	.word	0x40021014
 8000970:	4002101c 	.word	0x4002101c
 8000974:	40021018 	.word	0x40021018

08000978 <STK_VidInit>:
/* apply clock choice from configuration file
 * disable system tick interrupt
 * disable system tick
 * */
void STK_VidInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	/* bit 2 in STK_CTRL is responsible for choosing the signal source clock */
	#if (STK_CLKSOURCE == STK_AHB)
		SET_BIT(STK_CTRL, 2);

	#else
		CLR_BIT(STK_CTRL, 2);
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <STK_VidInit+0x30>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <STK_VidInit+0x30>)
 8000982:	f023 0304 	bic.w	r3, r3, #4
 8000986:	6013      	str	r3, [r2, #0]

	#endif

	/* disable system tick interrupt */
	/* bit 1 in STK_CTRL is responsible for enabling and disabling the interrupt */
	CLR_BIT(STK_CTRL, 1);
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <STK_VidInit+0x30>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <STK_VidInit+0x30>)
 800098e:	f023 0302 	bic.w	r3, r3, #2
 8000992:	6013      	str	r3, [r2, #0]

	/* disable system tick */
	/* bit 0 in STK_CTRL is responsible for enabling and disabling the system tick */
	CLR_BIT(STK_CTRL, 0);
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <STK_VidInit+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <STK_VidInit+0x30>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e010 	.word	0xe000e010

080009ac <STK_VidSetIntervalSingle>:

/* set load register
 * enable of interrupt and enable system tick
 * set call back */
void STK_VidSetIntervalSingle(uint32_t Copy_u32Ticks, void (*Copy_VidPtrToFunc)(void))
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	/**/
	CLR_BIT(STK_CTRL, 0);
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	6013      	str	r3, [r2, #0]
	STK_VAL = 0;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <STK_VidSetIntervalSingle+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]

	/* set load register */
	STK_LOAD = Copy_u32Ticks;
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <STK_VidSetIntervalSingle+0x58>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]

	/* enable system tick */
	/* bit 0 in STK_CTRL is responsible for enabling and disabling the system tick */
	SET_BIT(STK_CTRL, 0);
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6013      	str	r3, [r2, #0]

	/* if the passed pointer is not point to null*/
	if(Copy_VidPtrToFunc)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <STK_VidSetIntervalSingle+0x3a>
		/* set the call back global pointer with the passed pointer */
		STK_callBack = Copy_VidPtrToFunc;
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <STK_VidSetIntervalSingle+0x5c>)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	6013      	str	r3, [r2, #0]

	SET_BIT(STK_CTRL, 1);
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <STK_VidSetIntervalSingle+0x50>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	e000e010 	.word	0xe000e010
 8000a00:	e000e018 	.word	0xe000e018
 8000a04:	e000e014 	.word	0xe000e014
 8000a08:	200000ec 	.word	0x200000ec

08000a0c <STK_VidStopTimer>:
}

/* clear load register
 * clear value register */
void STK_VidStopTimer(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	/* clear load register */
	/* cleared by writing 0 */
	STK_LOAD = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <STK_VidStopTimer+0x18>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]

	/* clear value register */
	/* cleared by writing any value */
	STK_VAL = 0;
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <STK_VidStopTimer+0x1c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	e000e014 	.word	0xe000e014
 8000a28:	e000e018 	.word	0xe000e018

08000a2c <SysTick_Handler>:
}

/* check that callBack has been set
 * if not null call call back function */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	/* check that callBack has been set
	 * if not null call call back function */
	if (STK_callBack)
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Handler+0x18>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <SysTick_Handler+0x12>
		STK_callBack();
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <SysTick_Handler+0x18>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4798      	blx	r3
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000ec 	.word	0x200000ec

08000a48 <USART1_IRQHandler>:
#include "MCAL/USART/USART_private.h"
#include "MCAL/USART/USART_config.h"


void USART1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if(USART1_callBack)
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <USART1_IRQHandler+0x38>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <USART1_IRQHandler+0x1a>
		USART1_callBack((uint8_t)USART1->USART_DR);
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <USART1_IRQHandler+0x38>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <USART1_IRQHandler+0x3c>)
 8000a5a:	6852      	ldr	r2, [r2, #4]
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4798      	blx	r3

	/* clear flags */
	/* bits 5 and 6 in SR are responsible for clearing the interrupt flags */
	CLR_BIT(USART1->USART_SR, 5);
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <USART1_IRQHandler+0x3c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <USART1_IRQHandler+0x3c>)
 8000a68:	f023 0320 	bic.w	r3, r3, #32
 8000a6c:	6013      	str	r3, [r2, #0]
	CLR_BIT(USART1->USART_SR, 6);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <USART1_IRQHandler+0x3c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <USART1_IRQHandler+0x3c>)
 8000a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000f0 	.word	0x200000f0
 8000a84:	40013800 	.word	0x40013800

08000a88 <USART1_VidInit>:

void USART1_VidInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
/***************************************************************************************/
/********************************baud rate calculations*********************************/
/***************************************************************************************/
	/* calculating the integer part of the div */
	uint32_t Loc_u32Mantissa = (F_CPU) / (16 * USART1_BAUD_RATE);
 8000a8e:	2334      	movs	r3, #52	; 0x34
 8000a90:	607b      	str	r3, [r7, #4]

	/* calculating the fraction */
	uint32_t Loc_u32Fraction = (((F_CPU * 100) / (16 * USART1_BAUD_RATE)) % 100) * 16;
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	603b      	str	r3, [r7, #0]

	if(Loc_u32Fraction > 1500)	/* carry status */
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d904      	bls.n	8000aaa <USART1_VidInit+0x22>
	{
		Loc_u32Mantissa += 1 ;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
		Loc_u32Fraction  = 0 ;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
	}

#if USART1_STATUS == USART1_ENABLE

	/* clear the status register */
	USART1->USART_SR = 0x0000;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <USART1_VidInit+0x9c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
/***************************************************************************************/
	#if   USART1_DATA_SIZE == USART_8_BITS

		/* choose 8-bits data size */
		/* bit 12 in CR1 is responsible for choosing the data size */
		CLR_BIT(USART1->USART_CR1, 12);
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aba:	60d3      	str	r3, [r2, #12]

	#elif USART1_INTERRUPT == TXE_INT_ENABLE

		/* enable transmit data register is empty interrupt */
		/* bit 7 in CR1 is responsible for enabling and disabling transmit data register is empty interrupt */
		SET_BIT(USART1->USART_CR1, 7);
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <USART1_VidInit+0x9c>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	60d3      	str	r3, [r2, #12]
/***************************************************************************************/
	#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE

		/* enable the MCU to be a transmitter */
		/* bit 3 in CR1 is responsible for enabling and disabling transmitter */
		SET_BIT(USART1->USART_CR1, 3);
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <USART1_VidInit+0x9c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	60d3      	str	r3, [r2, #12]
/***************************************************************************************/
	#if   USART1_RECEIVER == RECEIVER_ENABLE

		/* enable the MCU to be a receiver */
		/* bit 2 in CR1 is responsible for enabling and disabling receiver */
		SET_BIT(USART1->USART_CR1, 2);
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	60d3      	str	r3, [r2, #12]
/***************************************************************************************/
	#if   USART1_STOP_BITS == ONE_STOP_BIT

		/* choose one stop bit */
		/* bits 12 and 13 in CR2 are responsible for choosing stop bit varieties */
		CLR_BIT(USART1->USART_CR2, 12);
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <USART1_VidInit+0x9c>)
 8000ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aea:	6113      	str	r3, [r2, #16]
		CLR_BIT(USART1->USART_CR2, 13);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <USART1_VidInit+0x9c>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <USART1_VidInit+0x9c>)
 8000af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000af6:	6113      	str	r3, [r2, #16]
	#endif	/* nested if(stop bit) */


	/* set baud rate */
	/* register BRR is responsible for baud rate fraction(0:3) mantissa(4:15) */
	USART1->USART_BRR = (Loc_u32Mantissa << 4) | (Loc_u32Fraction / 100) ;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	011a      	lsls	r2, r3, #4
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	490a      	ldr	r1, [pc, #40]	; (8000b28 <USART1_VidInit+0xa0>)
 8000b00:	fba1 1303 	umull	r1, r3, r1, r3
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	4907      	ldr	r1, [pc, #28]	; (8000b24 <USART1_VidInit+0x9c>)
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	608b      	str	r3, [r1, #8]

	/* enable USART */
	/* bit 13 in CR1 is responsible for enabling and disabling the USART */
	SET_BIT(USART1->USART_CR1, 13);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <USART1_VidInit+0x9c>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <USART1_VidInit+0x9c>)
 8000b12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b16:	60d3      	str	r3, [r2, #12]
	/* disable USART */
	/* bit 13 in CR1 is responsible for enabling and disabling the USART */
	CLR_BIT(USART1->USART_CR1, 13);

#endif	/* main if(USART enable) */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40013800 	.word	0x40013800
 8000b28:	51eb851f 	.word	0x51eb851f

08000b2c <USART1_VidTransmitSynchronous>:
	if(Copy_VidPtrToFunc)	/* function safety */
		USART1_callBack = Copy_VidPtrToFunc;
}

void USART1_VidTransmitSynchronous(uint8_t Copy_u8DataToTransmit)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	/* send data */
	/* put data on DR */
	USART1->USART_DR = Copy_u8DataToTransmit;
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <USART1_VidTransmitSynchronous+0x38>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	6053      	str	r3, [r2, #4]

	/* wait to complete sending */
	while(GET_BIT(USART1->USART_SR, 6) == 0);
 8000b3c:	bf00      	nop
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <USART1_VidTransmitSynchronous+0x38>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	099b      	lsrs	r3, r3, #6
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f8      	beq.n	8000b3e <USART1_VidTransmitSynchronous+0x12>

	/* clear the flag by writing 0 on the flag */
	CLR_BIT(USART1->USART_SR, 6);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <USART1_VidTransmitSynchronous+0x38>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <USART1_VidTransmitSynchronous+0x38>)
 8000b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40013800 	.word	0x40013800

08000b68 <USART1_U8ReceiveSynchronous>:

uint8_t USART1_U8ReceiveSynchronous(uint8_t *Copy_pu8DataToReceive)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	uint8_t Loc_u8Result = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]

	/* check if there is data to receive? */
	if(GET_BIT(USART1->USART_SR, 5))
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <USART1_U8ReceiveSynchronous+0x38>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	095b      	lsrs	r3, r3, #5
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <USART1_U8ReceiveSynchronous+0x26>
	{
		/* receive it */
		*Copy_pu8DataToReceive = (uint8_t)USART1->USART_DR;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <USART1_U8ReceiveSynchronous+0x38>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e001      	b.n	8000b92 <USART1_U8ReceiveSynchronous+0x2a>
	}
	else
	{
		Loc_u8Result = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
	}

	/* return the result */
	return Loc_u8Result;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
//	/* fill the buffer by data register*/
//	*Copy_pu8DataToReceive = (uint8_t)USART1->USART_DR;
//
//	/* clear the flag by writing 0 on the flag */
//	CLR_BIT(USART1->USART_SR, 5);
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <goToApplication>:
volatile uint8_t  u8BLWriteReq    = 1;
typedef void (*Function_t)(void);
Function_t addr_to_call = 0;

void goToApplication(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
#define SCB_VTOR   *((volatile uint32_t*)0xE000ED08)

	SCB_VTOR = 0x08001000;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <goToApplication+0x1c>)
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <goToApplication+0x20>)
 8000bac:	601a      	str	r2, [r3, #0]

	addr_to_call = *(Function_t*)(0x08001004);
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <goToApplication+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <goToApplication+0x28>)
 8000bb4:	6013      	str	r3, [r2, #0]
	addr_to_call();
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <goToApplication+0x28>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4798      	blx	r3
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	e000ed08 	.word	0xe000ed08
 8000bc4:	08001000 	.word	0x08001000
 8000bc8:	08001004 	.word	0x08001004
 8000bcc:	2000015c 	.word	0x2000015c

08000bd0 <main>:

int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	uint8_t Loc_u8RecStatus;


	RCC_VidInit();	/* HSI */
 8000bd6:	f7ff fe57 	bl	8000888 <RCC_VidInit>
	RCC_VidEnablePeripheralClock(APB2,	 USART1_RCC);
 8000bda:	210e      	movs	r1, #14
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff fe8b 	bl	80008f8 <RCC_VidEnablePeripheralClock>
	RCC_VidEnablePeripheralClock(APB2,	 GPIOA_RCC);
 8000be2:	2102      	movs	r1, #2
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fe87 	bl	80008f8 <RCC_VidEnablePeripheralClock>
	RCC_VidEnablePeripheralClock(AHB,	 4);			/* FPEC */
 8000bea:	2104      	movs	r1, #4
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe83 	bl	80008f8 <RCC_VidEnablePeripheralClock>

	GPIO_VidSetPinMode(PORT_A, PIN9, OUTPUT_SPEED_2MHZ_AFPP);	/* TX */
 8000bf2:	220a      	movs	r2, #10
 8000bf4:	2109      	movs	r1, #9
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fc62 	bl	80004c0 <GPIO_VidSetPinMode>
	GPIO_VidSetPinMode(PORT_A, PIN10, INPUT_FLOATING);			/* RX */
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	210a      	movs	r1, #10
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fc5d 	bl	80004c0 <GPIO_VidSetPinMode>

	USART1_VidInit();
 8000c06:	f7ff ff3f 	bl	8000a88 <USART1_VidInit>

	STK_VidInit();
 8000c0a:	f7ff feb5 	bl	8000978 <STK_VidInit>
	STK_VidSetIntervalSingle(15000000, goToApplication);	/* 15sec */
 8000c0e:	4925      	ldr	r1, [pc, #148]	; (8000ca4 <main+0xd4>)
 8000c10:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <main+0xd8>)
 8000c12:	f7ff fecb 	bl	80009ac <STK_VidSetIntervalSingle>

	while(!u8TimeOutFlag)
 8000c16:	e03a      	b.n	8000c8e <main+0xbe>
	{
		Loc_u8RecStatus = USART1_U8ReceiveSynchronous(&(u8RecBuffer[u8RecCounter]));
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <main+0xdc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <main+0xe0>)
 8000c22:	4413      	add	r3, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff9f 	bl	8000b68 <USART1_U8ReceiveSynchronous>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]

		if(Loc_u8RecStatus)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d02c      	beq.n	8000c8e <main+0xbe>
		{
			STK_VidStopTimer();
 8000c34:	f7ff feea 	bl	8000a0c <STK_VidStopTimer>
			if(u8RecBuffer[u8RecCounter] == '\n')
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <main+0xdc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <main+0xe0>)
 8000c42:	5c9b      	ldrb	r3, [r3, r2]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d116      	bne.n	8000c78 <main+0xa8>
			{
				if(u8BLWriteReq)
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <main+0xe4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <main+0x8e>
				{
					/* erase when first receive only */
					FPEC_VidEraseAppArea();
 8000c54:	f7ff fb7b 	bl	800034e <FPEC_VidEraseAppArea>
					u8BLWriteReq = 0;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
				}

				/* parse and send acknowledgment  */
				Parser_VidParseRecord(u8RecBuffer);
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <main+0xe0>)
 8000c60:	f7ff fb5d 	bl	800031e <Parser_VidParseRecord>
				USART1_VidTransmitSynchronous('o');
 8000c64:	206f      	movs	r0, #111	; 0x6f
 8000c66:	f7ff ff61 	bl	8000b2c <USART1_VidTransmitSynchronous>
				USART1_VidTransmitSynchronous('k');
 8000c6a:	206b      	movs	r0, #107	; 0x6b
 8000c6c:	f7ff ff5e 	bl	8000b2c <USART1_VidTransmitSynchronous>
				u8RecCounter = 0;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <main+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e006      	b.n	8000c86 <main+0xb6>
			}
			else
			{
				u8RecCounter++;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <main+0xdc>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <main+0xdc>)
 8000c84:	701a      	strb	r2, [r3, #0]
			}

			STK_VidSetIntervalSingle(15000000, goToApplication);	/* 15sec */
 8000c86:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <main+0xd4>)
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <main+0xd8>)
 8000c8a:	f7ff fe8f 	bl	80009ac <STK_VidSetIntervalSingle>
	while(!u8TimeOutFlag)
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <main+0xe8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0bf      	beq.n	8000c18 <main+0x48>
 8000c98:	2300      	movs	r3, #0
		{

		}

	}
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08000ba5 	.word	0x08000ba5
 8000ca8:	00e4e1c0 	.word	0x00e4e1c0
 8000cac:	20000158 	.word	0x20000158
 8000cb0:	200000f4 	.word	0x200000f4
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	20000159 	.word	0x20000159

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f000 f811 	bl	8000d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff ff6f 	bl	8000bd0 <main>

08000cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000d00:	08000d78 	.word	0x08000d78
  ldr r2, =_sbss
 8000d04:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000d08:	20000160 	.word	0x20000160

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <__libc_init_array>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	2600      	movs	r6, #0
 8000d14:	4d0c      	ldr	r5, [pc, #48]	; (8000d48 <__libc_init_array+0x38>)
 8000d16:	4c0d      	ldr	r4, [pc, #52]	; (8000d4c <__libc_init_array+0x3c>)
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	42a6      	cmp	r6, r4
 8000d1e:	d109      	bne.n	8000d34 <__libc_init_array+0x24>
 8000d20:	f000 f81a 	bl	8000d58 <_init>
 8000d24:	2600      	movs	r6, #0
 8000d26:	4d0a      	ldr	r5, [pc, #40]	; (8000d50 <__libc_init_array+0x40>)
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <__libc_init_array+0x44>)
 8000d2a:	1b64      	subs	r4, r4, r5
 8000d2c:	10a4      	asrs	r4, r4, #2
 8000d2e:	42a6      	cmp	r6, r4
 8000d30:	d105      	bne.n	8000d3e <__libc_init_array+0x2e>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d38:	4798      	blx	r3
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7ee      	b.n	8000d1c <__libc_init_array+0xc>
 8000d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d42:	4798      	blx	r3
 8000d44:	3601      	adds	r6, #1
 8000d46:	e7f2      	b.n	8000d2e <__libc_init_array+0x1e>
 8000d48:	08000d70 	.word	0x08000d70
 8000d4c:	08000d70 	.word	0x08000d70
 8000d50:	08000d70 	.word	0x08000d70
 8000d54:	08000d74 	.word	0x08000d74

08000d58 <_init>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr

08000d64 <_fini>:
 8000d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d66:	bf00      	nop
 8000d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	469e      	mov	lr, r3
 8000d6e:	4770      	bx	lr
